version: '3.9'

services:
  db:
    build: ./database
    container_name: postgres
    ports:
      - "5432:5432"
    user: postgres
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready" ]
      interval: 1s
      timeout: 5s
      retries: 10
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: football_data_db
    volumes:
      - ./data:/var/lib/postgresql/data
      # copy the sql script to create tables
      - ./database/sql/create_tables.sql:/docker-entrypoint-initdb.d/create_tables.sql

  pgadmin:
    container_name: pgadmin4_container
    image: dpage/pgadmin4
    restart: always
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@admin.com
      PGADMIN_DEFAULT_PASSWORD: root
    ports:
      - "5050:80"

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    networks:
      - kafka-network

  kafka:
    image: confluentinc/cp-kafka:latest
    hostname: kafka
    networks:
      - kafka-network
    ports:
      - "19092:19092"
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_INTERNAL://localhost:19092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1

  akhq:
    image: tchiotludo/akhq
    container_name: akhq
    restart: unless-stopped
    environment:
      AKHQ_CONFIGURATION: |
        akhq:
          connections:
            docker-kafka-server:
              properties:
                bootstrap.servers: "kafka:9092"
              schema-registry:
                url: "http://schema-registry:8081"
    ports:
      - "9180:8080"
    networks:
      - kafka-network

  service-discovery:
    container_name: service-discovery
    build: ./service-discovery
    image: service-discovery:latest
    ports:
      - "9080:9080"
    healthcheck:
      test: "curl --fail --silent localhost:9080/actuator/health | grep UP || exit 1"
      interval: 2s
      timeout: 3s
      retries: 5
      start_period: 2s

  team-service:
    container_name: team-service
    build: ./team-service
    image: team-service:latest
    depends_on:
      service-discovery:
        condition: service_healthy
      db:
        condition: service_healthy
    ports:
      - "9090:9090"
    environment:
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://service-discovery:9080/eureka
      SPRING_DATASOURCE_URL: jdbc:postgresql://db:5432/football_data_db
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: postgres

  players-service:
    container_name: players-service
    build: ./players-service
    image: players-service:latest
    depends_on:
      service-discovery:
        condition: service_healthy
      db:
        condition: service_healthy
    ports:
      - "9091:9091"
    environment:
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://service-discovery:9080/eureka
      SPRING_DATASOURCE_URL: jdbc:postgresql://db:5432/football_data_db
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: postgres

  api-gateway:
    container_name: api-gateway
    build: ./api-gateway
    image: api-gateway:latest
    depends_on:
      service-discovery:
        condition: service_healthy
      team-service:
        condition: service_started
      players-service:
        condition: service_started
    ports:
      - "9000:9000"
    environment:
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://service-discovery:9080/eureka


networks:
  kafka-network:
    name: kafka-network
    driver: bridge